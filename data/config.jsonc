{
    // Game.py
    // The delay between a key being pressed, and it pressing itself really fast
    // Units: milliseconds
    "KEY_REPEAT_DELAY": 20,
    // How fast that key should press itself
    // Units: milliseconds
    "KEY_REPEAT_INTERVAL": 20,
    // Units: Frames per second
    "FPS": 30,
    // Whether the game should start in full screen or not
    "START_FULLSCREEN": false,
    // Which display to start the program in, if there are multiple monitors - doesn't currently work, I don't know why.
    // Units: int
    "START_DISPLAY": 0,
    // Whether to use vsync - does not work until pygame 2.0.0 or greater
    "VSYNC": false,


    // 1 m/s": 20 pixels / 60 frames
    "PIXELS_PER_METER": 20,

   

    // PickPlanet.py
    // Defines how fast the planet animations rotate
    "PLANET_SECONDS_PER_ROTATION": 2,


    // Lander.py
    // Defines how fast the lander decelarates when in contact with the ground
    // Units: Arbitrary
    "GROUND_FRICTION": 1.5,
    // How much stronger the lander legs are against horizontal momentum vs vertical momentum
    // Units: m/s
    "EXTRA_LANDER_LEG_SIDE_STRENGTH": 1.5,
    // Defines how sensitive landers are to momentum is
    // Units: Inverted Arbitrary
    "MOMENTUM_SENSITIVITY": 1,
    // Defines how sesitive the landers are to rotating
    // Units: Arbitrary
    "ROTATION_SENSITIVITY": 1,
    // Defines how sensitive landers are to gravity
    // Units: Inverted Arbitrary
    "GRAVITY_SENSITIVITY": 4,
    // Defines how much mass fuel has
    // Units: kilograms
    "FUEL_WEIGHT": 1,
    // Defines how much momentum change fuel will give you
    // Units: Newtons
    "FUEL_THRUST": 1.06,
    // Defines a good default rotation speed (this changes based on how fast key repeat is set to)
    // Units: Arbitrary
    "BASE_ROTATION_SPEED": 200,
    // Defines how much fuel is used to change 1 m/s
    // Units: Inverted km/s (I think it's inverted)
    "SPECIFIC_IMPULSE": 0.000305,


    // Planet.py
    // Where the ground starts being drawn at
    // Units: pixels from the bottom
    "GROUND_START_Y": 200,
    // How long the lander should explode for
    // Units: frames
    "EXPLODE_TIME": 35,
    // How long after a lander stops exploding to show the death menu
    // Units: seconds
    "DEATH_DELAY_TIME": 0,
    // How far to the right we create another ground point to draw to (I think)
    // Units: pixels??
    "GROUND_X_WIDTH": 1,
    // How far from the left or right edges of the window do we start scrolling that direction
    // Units: pixels
    "SCROLL_WIDTH": 200,
    // How much the grond tends to slope up or down
    // I have no idea why this does what it does, or what I was thinking when I made it. It's super touchy though.
    // Units: Arbitrary??
    "SLOPE": 26,
    // The height of the subjective column that we allow new ground points to be drawn in (i.e. how flat the ground is)
    // Units: pixels
    "FLATTNESS": 100,
    // How far off the ground items float
    // Units: 
    "ITEM_FLOAT_HEIGHT": 10,
    // How likely a gas can item is to spawn as soon as you scroll
    // Units: Inverted chance
    "GAS_CAN_SPAWN_CHANCE": 1,
    // The minimum spread gas can items may have
    // Units: pixels
    "MIN_GAS_CAN_SPAWN_DIST": 600, // 1379
    // The maximum spread gas can items may have
    // Units: pixels
    "MAX_GAS_CAN_SPAWN_DIST": 100,
    // How likely a coin item is to spawn as soon as you scroll
    // Units: Inverted chance
    "COIN_SPAWN_CHANCE": 50,
    // The minimum spread coin items can have
    // Units: pixels
    "MIN_COIN_SPAWN_DIST": 50,
    // The maximum spread coin items can have
    // Units: pixels
    "MAX_COIN_SPAWN_DIST": 500,
    // How many bytecoin coins give you when you collect them
    "COIN_VALUE": 100,
    // How likely a super coin item is to spawn as soon as you scroll
    // Units: Inverted chance
    "SUPER_COIN_SPAWN_CHANCE": 20,
    // The minimum spread super coin items can have
    // Units: pixels
    "MIN_SUPER_COIN_SPAWN_DIST": 50,
    // How many bytecoin super coins give you when you collect them
    "SUPER_COIN_WORTH": 100,
    // Defines how far in one direction we have to go to try to generate another item
    // (This solves the problem that when you go in one direction slowly, more items are generated)
    // Units: pixels
    "ITEM_GENERATE_MORE_IGNORE_AMOUNT": 50
}